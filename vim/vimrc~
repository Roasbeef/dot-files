" All system-wide defaults are set in $VIMRUNTIME/debian.vim (usually just
" /usr/share/vim/vimcurrent/debian.vim) and sourced by the call to :runtime
" you can find below.  If you wish to change any of those settings, you should
" do it in this file (/etc/vim/vimrc), since debian.vim will be overwritten
" everytime an upgrade of the vim packages is performed.  It is recommended to
" make changes after sourcing debian.vim since it alters the value of the
" 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
set background=light

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
if has("autocmd")
  filetype plugin indent on
endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
"set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden             " Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

"Write the old file out when switching between files.  
set autowrite 

"tab Stuff
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab 

"show line numbers 
set number 

"indent stuff
set smartindent
set autoindent 

"colorschemesss
colorscheme desert

" ----------------------------------------
" Key bindings
" ----------------------------------------

" source: http://vim.wikia.com/wiki/VimTip102
" Let <Tab> do all the autocompletion
function! Smart_TabComplete()
	let line = getline('.') 					" curline
	let substr = strpart(line, -1, col('.'))	" from start to cursor
	let substr = matchstr(substr, "[^ \t]*$")	" word till cursor
	if (strlen(substr)==0)						" nothing to match on empty string
		return "\<tab>"
	endif
	let has_period = match(substr, '\.') != -1	" position of period, if any
	let has_slash = match(substr, '\/') != -1	" position of slash, if any
	if (!has_period && !has_slash)
		return "\<C-X>\<C-P>"					" existing text matching
	elseif ( has_slash )
		return "\<C-X>\<C-F>"					" file matching
	else
		return "\<C-X>\<C-O>"					" plugin matching
	endif
endfunction
inoremap <tab> <c-r>=Smart_TabComplete()<CR>


"" Indentation marking 
nmap <silent> <leader><bar> :call ToggleIndentGuidesTabs()<cr>
nmap <silent> <leader><bslash> :call ToggleIndentGuidesSpaces()<cr>

function! ToggleIndentGuidesTabs()
	if exists('b:iguides_tabs')
		setlocal nolist
		let &l:listchars = b:iguides_tabs
		unlet b:iguides_tabs
	else
		let b:iguides_tabs = &l:listchars
		setlocal listchars=tab:â”†\ "protect the space
		setlocal list
	endif
endfunction

function! ToggleIndentGuidesSpaces()
	if exists('b:iguides_spaces')
		call matchdelete(b:iguides_spaces)
		unlet b:iguides_spaces
	else
		let pos = range(1, &l:textwidth, &l:shiftwidth)
		call map(pos, '"\\%" . v:val . "v"')
		let pat = '\%(\_^\s*\)\@<=\%(' . join(pos, '\|') . '\)\s'
		let b:iguides_spaces = matchadd('CursorLine', pat)
	endif
endfunction

" --------
" Indenting stuff 
" --------

" Who doesn't like autoindent?
set autoindent

" Spaces are better than a tab character
set expandtab
set smarttab

" Who wants an 8 character tab?  Not me!
set shiftwidth=4
set softtabstop=4

""No back ups
set nobackup
set nowritebackup
set noswapfile

""filetype
filetype indent on
filetype on
filetype plugin on
